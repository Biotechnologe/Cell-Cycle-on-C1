#annotation <- annotation[order(annotation$RefSeqID, decreasing=F),]
rpkm_tableAll <- All[match(rownames(All), annotation$RefSeqID),]
rpkm_tableAll$gene_symbol <- annotation$gene_symbol
rpkm_table <- aggregate(rpkm_tableAll[,1:ncol(rpkm_tableAll)-1], by=list(rpkm_tableAll$gene_symbol), FUN=sum)
rownames(rpkm_table) <- rpkm_table$Group.1; rpkm_table <- rpkm_table[,-1]
View(rpkm_table)
View(rpkm_table)
plot(log2(All$"10_S10_L001"+0.1), log2(All$H01+0.1), xlab="log2(S10 TPM)", ylab="log2(H01 TPM)",
main="Correlation of randomly picked cells from two different MiSeq runs", xaxt="n", yaxt="n")
text(x=0, y=11, paste("Pearson r =", round(cor(log2(All$"10_S10_L001"+0.1), log2(All$H01+0.1)), 3), sep=" "))
abline(lm(log2(All$"10_S10_L001"+0.1) ~ log2(All$H01+0.1)), col="green", lty=2, lwd=2)
NoZero2 <- All[which(All$H01 > 0),]
NoZero3 <- All[which(All$H02 > 0),]
plot(All$H02, All$H01, xlab="Cell H02 [TPM]", ylab="Cell H01 [TPM]",
main="Correlation of randomly picked cells from the same MiSeq run")
plot(All$H02 < 9000, All$H01, xlab="Cell H02 [TPM]", ylab="Cell H01 [TPM]",
main="Correlation of randomly picked cells from the same MiSeq run")
All2 <-  All[which(All$H02 < 9000),]
plot(All2$H02, All2$H01, xlab="Cell H02 [TPM]", ylab="Cell H01 [TPM]",
main="Correlation of randomly picked cells from the same MiSeq run")
View(All)
plot(log2(rpkm_table$H02+0.1), log2(rpkm_table$H01+0.1), xlab="log2(H02 TPM)", ylab="log2(H01 TPM)",
main="Correlation of randomly picked cells from the same MiSeq run", xaxt="n", yaxt="n")
ExprTable <- read.table("~/Desktop/RIKEN/Kouno/GeneExpressionMiSeq.txt", header = TRUE, check.names = FALSE)
View(rpkm_table)
complete.cases(rpkm_table)
which(complete.cases(rpkm_table))
which(!complete.cases(rpkm_table))
View(rpkm_table)
number <- rowSums(rpkm_table)
numberGenes <- cbind(row.names(rpkm_table), rowSums(rpkm_table))
numberGenes <- as.data.frame(cbind(row.names(rpkm_table), rowSums(rpkm_table)))
View(numberGenes)
numbers <- numberGenes[which(numberGenes$V2 > 0),]
numbers <- numberGenes[which(as.numeric(numberGenes$V2) > 0),]
View(numbers)
numberGenes <- as.data.frame(cbind(row.names(rpkm_table), rowSums(rpkm_table))); colnames(numberGenes) <- c("Gene", "RowSum")
View(numberGenes)
class(numberGenes$RowSum)
class(as.numeric(numberGenes$RowSum))
numberGenes[which(as.numeric(numberGenes$RowSum)) > 0),]
numberGenes[which(as.numeric(numberGenes$RowSum) > 0),]
numbers <- numberGenes[which(as.numeric(numberGenes$RowSum) > 0),]
numberGenes[which(as.numeric(numberGenes$RowSum) >> 0),]
numberGenes[which(as.numeric(numberGenes$RowSum) > 0),]
numberGenes$RowSum <- as.numeric(numberGenes$RowSum)
class(numberGenes$RowSum)
number <- numberGenes[which(numberGenes$RowSum > 0),]
View(NoZero2)
number <- numberGenes[numberGenes$RowSum > 0,]
View(number)
View(numberGenes)
numberGenes <- as.data.frame(cbind(row.names(rpkm_table), rowSums(rpkm_table))); colnames(numberGenes) <- c("Gene", "RowSum")
View(numberGenes)
number <- numberGenes[numberGenes$RowSum > 0,]
numberGenes$RowSum <- as.numeric(numberGenes$RowSum)
View(numberGenes)
numberGenes <- as.data.frame(cbind(row.names(rpkm_table), rowSums(rpkm_table))); colnames(numberGenes) <- c("Gene", "RowSum")
numberGenes <- as.data.frame(cbind(row.names(rpkm_table), as.numeric(rowSums(rpkm_table)))); colnames(numberGenes) <- c("Gene", "RowSum")
class(numberGenes$RowSum)
class(as.numeric(as.vector(numberGenes$RowSum)))
head(as.numeric(as.vector(numberGenes$RowSum)))
head(as.numeric(as.vector(numberGenes$RowSum)), 50)
numberGenes <- as.data.frame(cbind(row.names(rpkm_table), rowSums(rpkm_table))); colnames(numberGenes) <- c("Gene", "RowSum")
numberGenes$RowSum <- as.numeric(as.vector(numberGenes$RowSum))
View(numberGenes)
number <- numberGenes[which(numberGenes$RowSum > 0),]
View(number)
unique(number$Gene)
length(unique(number$Gene))
scNumberGenes <- apply(rpkm_table, 1, sum)
expressingCells <- sapply(1:nrow(rpkm_table), function(x) nrow(rpkm_table[x,][which(rpkm_table[x,] > 0)]))
expressingCells <- sapply(1:nrow(rpkm_table), function(x) ncol(rpkm_table[x,][which(rpkm_table[x,] > 0)]))
head(data.frame(rownames(rpkm_table), expressingCells), 100)
View(rpkm_table)
71-32
72-33
71-33
64-33
67-33
65-33
56-33
64-33
62-33
60-33
DDBJ <- xmlTreeParse("Desktop/RIKEN/Plessy/DRA002399.experiment.xml", useInternal=T)
top <- xmlRoot(DDBJ)
library(XML)
DDBJ <- xmlTreeParse("Desktop/RIKEN/Plessy/DRA002399.experiment.xml", useInternal=T)
top <- xmlRoot(DDBJ)
xmlName(top)
names(top)
xmlName(top[3])
names(top[3])
names(top[[3]])
names(top[[1]])
names(top[[2]])
names(top[[5]])
top[[1]][["DESIGN"]]
runInfo <- top[[1]][["DESIGN"]]
name(runInfo)
names(runInfo)
names(runInfo[[3]])
names(runInfo[[3]][[1]])
names(runInfo[[3]][1])
runInfo[[3]][1])
runInfo[[3]][1]
runInfo[[3]][[1]]
runInfo[[3]][[6]]
runInfo
xmlSApply(1:5, function(x) top[[x]][["DESIGN"]])
xmlSApply(top, function(x) top[[x]][["DESIGN"]])
runInfo[[3]][[6]]
runInfo[[3]][[1]]
xmlValue(runInfo[[3]][[1]])
xmlValue(runInfo[[3]][[6]])
xmlChildren(runInfo[[3]][[6]])
xmlAttrs(top)
xmlAttrs(runInfo)
xmlName(runInfo)
xmlNamespace(runInfo)
xmlNamespace(top)
xmlName(top)
xmlChildren(runInfo)
xmlChildren(runInfo)
xmlName(top)
xmlNamespace(top)
xmlName(top[[1]])
xmlName(top[[1]][[1]])
xmlGetAttr(top[[1]][[1]])
xmlGetAttr(top)
xmlGetAttr(runInfo)
xmlGetAttr(top, "DESIGN")
xmlGetAttr(top, "LIBRARY_NAME")
top[[1]][["DESIGN"]]
runInfo[[3]][[6]]
top[[1]][["DESIGN"]]
xmlValue(runInfo)
xmlValue(runInfo[[6]])
runInfo[[3]]
runInfo[[3]][[1]]
xmlValue(runInfo[[3]][[1]])
xmlValue(runInfo[[6]][[1]])
runInfo[[3]][[6]]
runInfo[[3]]
xmlSApply(runinfo, function(x) xmlSApply(c(1,6) runInfo[[3]][[x]])
xmlSApply(runinfo, function(x) xmlSApply(x, xmlValue))
xmlSApply(runInfo, function(x) xmlSApply(c(1,6) runInfo[[3]][[x]])
xmlSApply(runInfo, function(x) xmlSApply(x, xmlValue))
nodes <- getNodeSet(top, "DESIGN")
xmlSApply(runInfo, function(x) xmlSApply(x, xmlValue))
test <- data.frame(t(xmlSApply(runInfo, function(x) xmlSApply(x, xmlValue))),row.names=NULL)
View(test)
test <- data.frame(xmlSApply(runInfo, function(x) xmlSApply(x, xmlValue)),row.names=NULL)
xmlSApply(runInfo, function(x) xmlSApply(x, xmlValue))
xmlSApply(top, function(x) xmlSApply(x, xmlValue))
test <- data.frame(t(xmlSApply(top, function(x) xmlSApply(x, xmlValue))),row.names=NULL)
View(test)
test <- data.frame(xmlSApply(top, function(x) xmlSApply(x, xmlValue)),row.names=NULL)
View(test)
test <- data.frame(t(xmlSApply(top, function(x) xmlSApply(x, xmlValue))),row.names=NULL)
View(test)
top[['DESIGN']]
sapply(1:5, top[[x]][['DESIGN']])
sapply(1:5, function(x) top[[x]][['DESIGN']])
runInfo <- sapply(1:5, function(x) top[[x]][['DESIGN']])
test <- data.frame(t(xmlSApply(runInfo, function(x) xmlSApply(x, xmlValue))),row.names=NULL)
top[[1:5]][["DESIGN"]]
runInfo
xmlValue(runInfo[[1]])
xmlValue(runInfo[[5]])
xmlValue(runInfo[[6]])
xmlValue(runInfo[[3]])
xmlValue(runInfo[1])
xmlValue(runInfo)
runInfo[[1]]
runInfo[[1]][[1]]
runInfo[[1]][1]
runInfo[[1]][3]
runInfo[[1]][2]
runInfo[[1]][3]
runInfo[[1]][4]
runInfo[[1]][5]
runInfo[[1]][6]
runInfo[[1]][7]
runInfo[[1]]
runInfo[[1]][["LIBRARY_NAME"]]
runInfo[[1]]["LIBRARY_NAME"]
runInfo["LIBRARY_NAME"]
runInfo[["LIBRARY_NAME"]]
xmlValue(runInfo)
xmlValue(runInfo[1])
xmlValue(runInfo[[5]])
xmlValue(runInfo[[1]])
xmlValue(runInfo[[1]])
read.table("~/Desktop/RIKEN/Kouno/GenesperCell.txt", header = TRUE, sep="\t")
Genes <- read.table("~/Desktop/RIKEN/Kouno/GenesperCell.txt", header = TRUE, sep="\t")
hist(Genes$expressedGenes)
rpkm_20 <- read.table("~/Desktop/RIKEN/SC_HeLa-Fucci/sailfish/RefSeq_sailfish/kmer20/RefSeq_sailfish20.txt", header = TRUE, row.names = 1, check.names = FALSE)
View(rpkm_20)
test <- read.table("Desktop/Archive/GeneExpression.txt", header = TRUE, row.names = 1, check.names = FALSE)
annotation <- read.table("~/Desktop/RIKEN/SC_HeLa-Fucci/sailfish/RefSeq_sailfish/RefSeqID_GeneSymbol.txt", header = TRUE, sep="\t")
# get older version of metadata table (no FPKM outlier column)
metadata <- read.csv("~/Desktop/RIKEN/SC_HeLa-Fucci/summary/Timo_quantnorm/combined.csv")
# replace problematic annotation
annotation[,2] <- as.character(annotation[,2])
annotation[15675,2] <- "KIR2DS4-003-allele"
annotation[,2] <- as.factor(annotation[,2])
# create column to match cell_ids
metadata$lookup <- paste(metadata$Library, metadata$Well, sep="-")
metadata <- metadata[match(names(rpkm_20), metadata$lookup),]
colnames(rpkm_20) <- metadata$cell_id
#annotation <- annotation[order(annotation$RefSeqID, decreasing=F),]
rpkm_table20 <- rpkm_20[match(rownames(rpkm_20), annotation$RefSeqID),]
rpkm_table20$gene_symbol <- annotation$gene_symbol
rpkm_table <- aggregate(rpkm_table20[,1:ncol(rpkm_table20)-1], by=list(rpkm_table20$gene_symbol), FUN=sum)
rownames(rpkm_table) <- rpkm_table$Group.1; rpkm_table <- rpkm_table[,-1]
getwd()
ls()
test <- read.table("GeneExpression_mES.txt", header = TRUE, row.names = 1, check.names = FALSE)
View(test)
write.table(rpkm_table, "GeneExpression.txt", sep="\t", row.names=T, col.names=T, quote=F)
test <- read.table("GeneExpression.txt", header = TRUE, row.names = 1, check.names = FALSE)
View(test)
View(test)
library(XML)
library(reshape2)
DDBJ <- xmlTreeParse("ftp://ftp.ddbj.nig.ac.jp/ddbj_database/dra/fastq/DRA002/DRA002399/DRA002399.experiment.xml", useInternal=T)
top <- xmlRoot(DDBJ)
RunID <- xpathApply(top, "//LIBRARY_NAME", xmlValue)
# get DDBJ Run accession number
Experiment  <- xpathApply(top, "//EXPERIMENT", xmlAttrs)
Accession <- lapply(1:5, function(x) Experiment[[x]][1])
Barcodes <- xpathApply(top, "//LIBRARY_CONSTRUCTION_PROTOCOL", xmlValue)
filter1 <- gsub("\n", "", as.character(Barcodes))
filter2 <- strsplit(filter1, split=',')
names(filter2) <- paste(RunID, Accession, sep="_")
# load table that links well number with barcodes
WellID <- read.table("WellToBarcodes.txt", header=T, stringsAsFactors=F)
# make list of string vectors
filter3 <- lapply(1:5, function(x) as.vector(filter2[x]))
# create combined table in long format with run ID and DDBJ ID and barcode
long1 <- c()
y <- data.frame()
x <- c()
for (i in filter3) {
long1 <- melt(i)
y <- rbind(y, long1)
x <- x+1
}
link <- y; names(link) <- c("DDBJBarcode", "Library")
# remove white spaces
link <- as.data.frame(apply(link, 2, function(x) gsub('\\s+', '',x)))
# separate DDBJ name and barcode
intermediate <- as.data.frame(do.call(rbind, sapply(1:length(link$DDBJBarcode), function(x) strsplit(as.character(link$DDBJBarcode)[x], split=":"))))
final <- cbind(link, intermediate)
final <- final[,-1]; names(final) <- c("Library", "DDBJ", "Barcode")
# associate each barcode from the DDBJ XML with the well coordinate
final$Well <- WellID$Well[match(as.character(final$Barcode), as.character(WellID$Barcode))]
# split RunID and ExperiemntAccession
intermediate2 <- as.data.frame(do.call(rbind, sapply(1:length(final$Library), function(x) strsplit(as.character(final$Library)[x], split="_")))); names(intermediate2) <- c("Library", "ExperimentAccession")
final <- cbind(final[,-1], intermediate2)
# load combined metadata table to link to cell IDs
LibraryToC1ID <- read.table("LibraryToC1.txt", header=T, stringsAsFactors=F)
# get cell IDs for DDBJ names
final <- merge(final, LibraryToC1ID, by=c("Library", "Well"))
final$cell_id <- paste(final$Run, final$Well, sep="_")
head(final)
945/2
annotation <- read.table("~/Desktop/RIKEN/SC_HeLa-Fucci/sailfish/RefSeq_sailfish/RefSeqID_GeneSymbol.txt", header = TRUE, sep="\t")
summary(annotation)
grep("NM_", annotation$RefSeqID)
summary(grep("NM_", annotation$RefSeqID))
levels(grep("NM_", annotation$RefSeqID))
levels(factor(grep("NM_", annotation$RefSeqID)))
levels(annotation$RefSeqID)
levels(strsplit(annotation$RefSeqID, split="_", fixed=T))
levels(strsplit(annotation$RefSeqID, split="_", fixed=T)
metadata <- read.csv("~/Desktop/RIKEN/SC_HeLa-Fucci/summary/Timo_quantnorm/combined.csv")
View(metadata)
to.upper(gataacatggccatcatcaaggagttcatgcgcttcaaggtgcacatggagggctccgtg
aacggccacgagttcgagatcgagggcgagggcgagggccgcccctacgagggcacccag
accgccaagctgaaggtgaccaagggtggccccctgcccttcgcctgggacatcctgtcc
cctcagttcatgtacggctccaaggcctacgtgaagcaccccgccgacatccccgactac
ttgaagctgtccttccccgagggcttcaagtgggagcgcgtgatgaacttcgaggacggc
ggcgtggtgaccgtgacccaggactcctccctgcaggacggcgagttcatctacaaggtg
aagctgcgcggcaccaacttcccctccgacggccccgtaatgcagaagaagaccatgggc
tgggaggcctcctccgagcggatgtaccccgaggacggcgccctgaagggcgagatcaag
cagaggctgaagctgaaggacggcggccactacgacgctgaggtcaagaccacctacaag
gccaagaagcccgtgcagctgcccggcgcctacaacgtcaacatcaagttggacatcacc
tcccacaacgaggactacaccatcgtggaacagtacgaacgcgccgagggccgccactcc
accggcggcatggacgagctgtacaagggatatccatcacactggcggccgctcgag)
cherry <- read.table("Desktop/mCherry.txt")
View(cherry)
upper(cherry)
toupper(cherry)
toupper(as.character(cherry))
View(cherry)
cherry <- read("Desktop/mCherry.txt")
cherry <- rline("Desktop/mCherry.txt")
spectra <- read.xls("~/Desktop/RIKEN/Cell_info/Fucci3.2 spectral profile 20140917as.xlsx")
transgenes <- spectra[34:nrow(spectra), -1]
colnames(transgenes) <- as.vector(as.matrix(spectra[33,-1]))
transgenes <- as.data.frame(apply(transgenes, 2, as.numeric))
library(gdata)
spectra <- read.xls("~/Desktop/RIKEN/Cell_info/Fucci3.2 spectral profile 20140917as.xlsx")
transgenes <- spectra[34:nrow(spectra), -1]
colnames(transgenes) <- as.vector(as.matrix(spectra[33,-1]))
transgenes <- as.data.frame(apply(transgenes, 2, as.numeric))
transgenes
summary(spectra)
summary(transgenes)
View(transgenes)
View(transgenes)
library(gdata)
spectra <- read.xls("~/Desktop/RIKEN/Cell_info/Fucci3.2 spectral profile 20140917as.xlsx")
transgenes <- spectra[34:nrow(spectra), -1]
colnames(transgenes) <- as.vector(as.matrix(spectra[33,-1]))
transgenes <- as.data.frame(apply(transgenes, 2, as.numeric))
#alpha function for colors
alpha <- function(col, alpha=0.4){
if(missing(col))
stop("add color")
apply(sapply(col, col2rgb)/255, 2,
function(x)
rgb(x[1], x[2], x[3], alpha=alpha))
}
par(lwd=2)
plot(transgenes$AmCyan_ex_WL, transgenes$AmCyan_ex_data, type="l", lty=2, col="#00FFFF", ann=F, xlim=c(300, 800))
grid(NULL, NULL, col="lightgrey", lwd=1, lty=1)
#rect(330,0,390,1, border="#99FFFF", col=alpha("#CCFFFF"), lty=2)
rect(480,0,495,1, border="#CCFF66", col=alpha("#CCFF99"), lty=2)
rect(565,0,580,1, border="#FF9999", col=alpha("#FFCCCC"), lty=2)
rect(510,0,545,1, border="#CCFF66", col=alpha("#CCFF99"), lty=1)
rect(610,0,670,1, border="#FF9999", col=alpha("#FFCCCC"), lty=1)
lines(transgenes$AmCyan_em_WL, transgenes$AmCyan_em_data, lty=1, col="#00FFFF")
lines(transgenes$mVenus_ex_WL, transgenes$mVenus_ex_data, lty=2, col="#00FF00")
lines(transgenes$mVenus_em_WL, transgenes$mVenus_em_data, lty=1, col="#00FF00")
lines(transgenes$mCherry_ex_WL, transgenes$mCherry_ex_data, lty=2, col="#FF6347")
lines(transgenes$mCherry_em_WL, transgenes$mCherry_em_data, lty=1, col="#FF6347")
title(main="Fucci fluorescence spectra", xlab="Wavelength [nm]", ylab="normalized Intensity")
#axis(1, at=seq(300, 800, 10), labels=F, col="black", col.ticks="black", lwd.ticks=2)
#axis(2, at=seq(0, 1, 0.1), labels=F, col="black", col.ticks="black", lwd.ticks=2)
#minor.tick(nx=10, ny=4, tick.ratio=0.5)
legend("topright", c("AmCyan excitation", "AmCyan emission", "mVenus excitation", "mVenus emission", "mCherry excitation", "mCherry emission"),
lty=rep(c(2,1),3), col=rep(c("#00FFFF", "#00FF00", "#FF6347"), each=2), inset=0.01, cex=0.6)
rpkm_20 <- read.table("~/Desktop/RIKEN/SC_HeLa-Fucci/sailfish/RefSeq_sailfish/kmer20/GeneExpression_sailfish_TPM.txt", header = TRUE, row.names = 1, check.names = FALSE)
annotation <- read.table("~/Desktop/RIKEN/SC_HeLa-Fucci/sailfish/RefSeq_sailfish/RefSeqID_GeneSymbol.txt", header = TRUE, sep="\t")
# get older version of metadata table (no FPKM outlier column)
metadata <- read.csv("~/Desktop/RIKEN/SC_HeLa-Fucci/summary/Timo_quantnorm/combined.csv")
# replace problematic annotation
annotation[,2] <- as.character(annotation[,2])
annotation[15675,2] <- "KIR2DS4-003-allele"
annotation[,2] <- as.factor(annotation[,2])
# create column to match cell_ids
metadata$lookup <- paste(metadata$Library, metadata$Well, sep="-")
metadata <- metadata[match(names(rpkm_20), metadata$lookup),]
colnames(rpkm_20) <- metadata$cell_id
setwd("Desktop/RIKEN/Plessy/DDBJ/")
library(XML)
library(reshape)
# parse the xml tree structure into R
DDBJ <- xmlTreeParse("ftp://ftp.ddbj.nig.ac.jp/ddbj_database/dra/fastq/DRA002/DRA002399/DRA002399.experiment.xml", useInternal=T)
# make the nodes of the tree readable with common R commands
top <- xmlRoot(DDBJ)
# finds and returns values of a specific node as a list
RunID <- xpathApply(top, "//LIBRARY_NAME", xmlValue)
# get DDBJ Run accession number
Experiment  <- xpathApply(top, "//EXPERIMENT", xmlAttrs)
Accession <- lapply(1:5, function(x) Experiment[[x]][1])
# get the cell barcodes
Barcodes <- xpathApply(top, "//LIBRARY_CONSTRUCTION_PROTOCOL", xmlValue)
#
filter <- gsub("\n", "", as.character(Barcodes))
filter <- strsplit(filter, split=',')
names(filter) <- paste(RunID, Accession, sep="_")
# load table that links well number with barcodes
# the barcode sequences were taken from the Fluidigm protocol 'PN 100-5950 A1'
WellID <- read.csv("WellToBarcodes.csv", header=T, stringsAsFactors=F)
# make list of string vectors
filter <- lapply(1:5, function(x) as.vector(filter[x]))
# create combined table in long format with run ID and DDBJ ID and barcode
link <- melt(filter)[,1:2]; names(link) <- c("DDBJIndex", "Library")
View(link)
intermediate <- read.table(text=as.character(link$DDBJIndex), sep=':')
View(intermediate)
DDBJ <- xmlTreeParse("ftp://ftp.ddbj.nig.ac.jp/ddbj_database/dra/fastq/DRA002/DRA002399/DRA002399.experiment.xml", useInternal=T)
# make the nodes of the tree readable with common R commands
top <- xmlRoot(DDBJ)
# finds and returns values of a specific node as a list
RunID <- xpathApply(top, "//LIBRARY_NAME", xmlValue)
# get DDBJ Run accession number
Experiment  <- xpathApply(top, "//EXPERIMENT", xmlAttrs)
Accession <- lapply(1:5, function(x) Experiment[[x]][1])
# get the cell barcodes
Barcodes <- xpathApply(top, "//LIBRARY_CONSTRUCTION_PROTOCOL", xmlValue)
Barcodes
Accession
Experiment
RunID
library(moments)
library(lattice)
library(flexmix)
library(limma)
library(MASS)
library(rms)
library(Hmisc)
library(grid)
library(survival)
library(splines)
library(Formula)
library(ggplot2)
library(gridExtra)
library(SparseM)
library(contrast)
setwd("Desktop/RIKEN/Cell-Cycle-on-C1/")
getwd()
data <- read.csv("fluorescence/Results_fluorescence.csv", header=T)
View(data)
View(data)
View(data)
setwd("fluorescence/")
View(data)
View(data)
View(data)
View(data)
scriptName <- "SetArea_Measure_UserConfirm.ijm"
pdfName <- "Usage_of_ImageJ_macro_SetArea_Measure_UserConfirm.pdf"
resultsUser1 <- "Results_SetArea_Measure_UserConfirm_EM.txt"
resultsUser2 <- "Results_SetArea_Measure_UserConfirm_MB.txt"
```
## Summary
Images of *Fucci* cells loaded in the C1 capture array, were taken before cell lysis. Three modes have been used for imaging: bright field (BF), Green and Red. [Raw images](https://briefcase.riken.jp/public/mAF8gAzoLsdAVPwBXp1LS5HJzGlicAWQZwlMer8hKu5U) in the Cellomics specific C01 format were used for measuring fluorescence intensities and reporting errors in [Fiji ImageJ](http://fiji.sc/Fiji) All platforms version by using the macro [`r scriptName`](`r scriptName`). The usage of this macro is illustrated in the accompanying PDF file [`r pdfName`](`r pdfName`). The macro will ask the user to select the directory which contains all the raw image files.
The following procedures are done:
* Open images one by one: first bright field, then Green, then Red channel images
* Draw a circular area with a diameter of 13 pixels on the bright field image
* Open dialogue box and and wait for the user to place the circle over the cell
* Measure fluorescence intensities on this defined area for teh Green and Red channel image, and measure background intensity levels 100 x 50 pixels adjacent to the cell (unless position is changed by the user)
* Open dialogue box and ask the user for an error report: comment and error type
* Record the file name, coordinates, size of area, mean intnsity, standard deviation, minimum and maximum intensities and an Error report
* Repeat the previous steps for every set of three images in the folder
The Fiji ImageJ macro was run independently by Elo Madissoon, EM (file [`r resultsUser1`](`r resultsUser1`)) and Michael Böttcher, MB (file [`r resultsUser2`](`r resultsUser2`)). The current document explains the [column names](#names) in the results files, analyzes the [consistency](#consistency) of the measurements, compares and finds consensus in the [error reporting](#errorreport) and gives an [overview](#overview) of the final values.
### <a name='names'>Column names</a>
#### cell_id
Identifier of the well, which is the common part of the filename for all channels (bright field, red and green)
#### cellCoord.x and cellCoord.y
Pixel coordinates of the upper left corner of the smallest rectangle that completely contain the selection area.
#### area
Size of the selection area.
#### mean, std, min, max
mean, standard deviation, minimum and maximum fluorescence intensity in the selection. Corresponding measurements to the background area (adjacent to the cell) when prefix is "bg." and to green channel or red channel when the suffix is ".ch2" or ".ch3" correspondingly.
#### error
The error types:
- "0-No Error" (default)
- "1-No cell"
- "2-Debris"
- "3-OutOfFocus"
- "4-MultipleCells"
#### comment
Write additional notes here, if necessary. Deafults to "No comment"
### <a name='consistency'>Consistency of ImageJ measurements</a>
Load the fluorescence results files and summarise the content.
```{r pairwise correlation matrix}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
test <- cor.test(x,y)
signif <- symnum(test$p.value, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
text(0.5, 0.5, txt, cex = cex * r)
text(.8, .8, signif, cex=cex, col=2)
}
user1 <- read.table(resultsUser1, header=TRUE, sep="\t", row.names=1)
user2 <- read.table(resultsUser2, header=TRUE, sep="\t", row.names=1)
summary(user1)
colnames(user2)
View(user1)
```{r echo=FALSE}
knitr::opts_knit$set(verbose = TRUE)
options(width=100)
opts_chunk$set(fig.width=10)
```
```{r}
scriptName <- "SetArea_Measure_UserConfirm.ijm"
pdfName <- "Usage_of_ImageJ_macro_SetArea_Measure_UserConfirm.pdf"
resultsUser1 <- "Results_SetArea_Measure_UserConfirm_User1.txt"
resultsUser2 <- "Results_SetArea_Measure_UserConfirm_User2.txt"
```
```{r pairwise correlation matrix}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
test <- cor.test(x,y)
signif <- symnum(test$p.value, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
text(0.5, 0.5, txt, cex = cex * r)
text(.8, .8, signif, cex=cex, col=2)
}
user1 <- read.table(resultsUser1, header=TRUE, sep="\t", row.names=1)
user2 <- read.table(resultsUser2, header=TRUE, sep="\t", row.names=1)
summary(user1)
colnames(user2)
